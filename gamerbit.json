{"README.md":"# gamer:bit\n\n![SparkFun Gamer:bit](https://raw.githubusercontent.com/sparkfun/pxt-gamer-bit/master/icon.png)  \n\nThe package adds support for the controller:bit and **gamer:bit** add-on board from SparkFun.\n\nTo use this package, go to https://makecode.microbit.org, click ``Add package`` and search for **gamerbit**.\n\n### ~ hint\n\nThis package is still under development and subject to changes.\n\n### ~\n\n## Usage\n\n* Button pins are named to function.\n* Provides button state detection block.\n* Runs user code on button changed events.\n* Configures pins to pull-up.\n\n### Pin names\n\nThe micro:bit pins are named to match gamepad functions:\n\n* ``P0`` -- D-PAD up\n* ``P1`` -- D-PAD left\n* ``P2`` -- D-PAD right\n* ``P8`` -- D-PAD down\n* ``P12`` -- Y button (right-hand, left button)\n* ``P16`` -- X button (right-hand, right button)\n* ``P5`` -- A button (micro:bit, left button)\n* ``P11`` -- B button (micro:bit, right button)\n\nThe button pins are automatically configured as pull-up when using the package.\n\n### Reading button states\n\nUse the logical plug-in blocks to read if the button is pressed.\n\n```blocks\nif (gamerbit.isPressed(GamerBitPin.P0)) {\n    led.plot(0, 0)\n} else {\n    led.unplot(0, 0)\n}\n```\n\n*Example turns on LED when button is pressed*\n\n### Button events\n\nCustom code can be run when a button event happens.\n\nThey can be triggered on:\n\n* down (pressed)\n* up (released)\n* clicked (pressed then released)\n\n```blocks\ngamerbit.onEvent(GamerBitPin.P0, GamerBitEvent.Down, () => {\n    led.plot(0, 0)\n})\ngamerbit.onEvent(GamerBitPin.P0, GamerBitEvent.Up, () => {\n    led.unplot(0, 0)\n})\n```\n\n*Example turns on LED when button is pressed*\n\n## Examples\n\n### Example: Remote controlled a microservo\n\nThis program uses the left, right, up buttons\nand sends the servo angle over radio.\n\n```blocks\n// gamer:bit code\ngamerbit.onEvent(GamerBitPin.P0, GamerBitEvent.Down, () => {\n    // go straight\n    radio.sendNumber(90)\n});\ngamerbit.onEvent(GamerBitPin.P1, GamerBitEvent.Down, () => {\n    // turn left\n    radio.sendNumber(45)\n});\ngamerbit.onEvent(GamerBitPin.P2, GamerBitEvent.Down, () => {\n    // turn right\n    radio.sendNumber(135)\n});\n\n// robot code\nradio.onDataPacketReceived( ({ receivedNumber }) =>  {\n    pins.servoWritePin(AnalogPin.P0, receivedNumber)\n})\n```\n\n### Example: Sending a packet of data over wireless\n\nThe following program creates a bit field from the state of the buttons on the gamer:bit and sends it with the radio.  This is meant to be decoded with the moto:bit example to make a simple RC robot.\n\n\n```blocks\nlet packet = 0\nbasic.forever(() => {\n    packet = 0\n    if (gamerbit.isPressed(GamerBitPin.P0)) {\n        led.plot(1, 0)\n        packet = packet + 128\n    } else {\n        led.unplot(1, 0)\n    }\n    if (gamerbit.isPressed(GamerBitPin.P1)) {\n        led.plot(0, 1)\n        packet = packet + 64\n    } else {\n        led.unplot(0, 1)\n    }\n    if (gamerbit.isPressed(GamerBitPin.P2)) {\n        led.plot(2, 1)\n        packet = packet + 32\n    } else {\n        led.unplot(2, 1)\n    }\n    if (gamerbit.isPressed(GamerBitPin.P8)) {\n        led.plot(1, 2)\n        packet = packet + 16\n    } else {\n        led.unplot(1, 2)\n    }\n    if (gamerbit.isPressed(GamerBitPin.P12)) {\n        led.plot(3, 2)\n        packet = packet + 8\n    } else {\n        led.unplot(3, 2)\n    }\n    if (gamerbit.isPressed(GamerBitPin.P16)) {\n        led.plot(4, 2)\n        packet = packet + 4\n    } else {\n        led.unplot(4, 2)\n    }\n    if (gamerbit.isPressed(GamerBitPin.P5)) {\n        led.plot(3, 0)\n        packet = packet + 2\n    } else {\n        led.unplot(3, 0)\n    }\n    if (gamerbit.isPressed(GamerBitPin.P11)) {\n        led.plot(4, 0)\n        packet = packet + 1\n    } else {\n        led.unplot(4, 0)\n    }\n    radio.sendNumber(packet)\n})\nradio.setGroup(13)\n```\n\n## License\n\nMIT\n\n## Supported targets\n\n* for PXT/microbit\n\n\n","_locales/fr/gamerbit-jsdoc-strings.json":"{\n  \"GamerBitEvent\": \"The event raised by the SparkFun gamer:bit pins\",\n  \"GamerBitPin\": \"The pins used by SparkFun gamer:bit\",\n  \"gamerbit\": \"Functions to operate the SparkFun gamer:bit\",\n  \"gamerbit.isPressed\": \"Lancer des instructions suivant un évènement sur le gamer:bit.\",\n  \"gamerbit.isPressed|param|button\": \"the pin that acts as a button\",\n  \"gamerbit.onEvent\": \"Déterminer les instructions à lancer lorsque d'un évènement donné sur le gamer:bit.\n\"\n}\n","_locales/fr/gamerbit-strings.json":"{\n  \"GamerBitEvent.Click|block\": \"cliqué\",\n  \"GamerBitEvent.Down|block\": \"appuyé\",\n  \"GamerBitEvent.Up|block\": \"relaché\",\n  \"GamerBitPin.P0|block\": \"P0 (haut du D-PAD)\",\n  \"GamerBitPin.P11|block\": \"P11 (bouton B)\",\n  \"GamerBitPin.P12|block\": \"P12 (bouton Y)\",\n  \"GamerBitPin.P16|block\": \"P16 (bouton X)\",\n  \"GamerBitPin.P1|block\": \"P1 (gauche du D-PAD)\",\n  \"GamerBitPin.P2|block\": \"P2 (droite du D-PAD)\",\n  \"GamerBitPin.P5|block\": \"P5 (bouton A)\",\n  \"GamerBitPin.P8|block\": \"P8 (bas du D-PAD)\",\n  \"gamerbit.isPressed|block\": \"gamer:bit appuyer sur app%button|\",\n  \"gamerbit.onEvent|block\": \"gamer:bit sur %button|%event\",\n  \"gamerbit|block\": \"gamerbit\",\n  \"{id:category}Gamerbit\": \"Gamerbit\"\n}\n","enums.d.ts":"// Will be auto-generated if needed.\n","gamerbit.cpp":"#include \"pxt.h\"\r\n\r\nusing namespace pxt;\r\nnamespace gamerbit {\r\n    bool initialized = false;\r\n\r\n    //%\r\n    void init() {\r\n        if (initialized) return;\r\n\r\n    // mount buttons on the pins with a pullup mode\r\n    // TODO: fix this issue in the DAL itself\r\n#define ALLOC_PIN_BUTTON(id) new MicroBitButton(getPin(id)->name, id, MICROBIT_BUTTON_ALL_EVENTS, PullUp);\r\n    ALLOC_PIN_BUTTON(MICROBIT_ID_IO_P0)\r\n    ALLOC_PIN_BUTTON(MICROBIT_ID_IO_P1)\r\n    ALLOC_PIN_BUTTON(MICROBIT_ID_IO_P2)\r\n    ALLOC_PIN_BUTTON(MICROBIT_ID_IO_P8)\r\n    ALLOC_PIN_BUTTON(MICROBIT_ID_IO_P12)\r\n    ALLOC_PIN_BUTTON(MICROBIT_ID_IO_P16)\r\n#undef ALLOC_PIN_BUTTON\r\n\r\n        initialized = true;\r\n    }\r\n}\r\n","gamerbit.ts":"/**\n * The pins used by SparkFun gamer:bit\n */\n//%\nenum GamerBitPin {\n    //% block=\"P0 (D-PAD up)\"\n    P0 = DAL.MICROBIT_ID_IO_P0,\n    //% block=\"P1 (D-PAD left)\"\n    P1 = DAL.MICROBIT_ID_IO_P1,\n    //% block=\"P2 (D-PAD right)\"\n    P2 = DAL.MICROBIT_ID_IO_P2,\n    //% block=\"P8 (D-PAD down)\"\n    P8 = DAL.MICROBIT_ID_IO_P8,\n    //% block=\"P12 (Y button)\"\n    P12 = DAL.MICROBIT_ID_IO_P12,\n    //% block=\"P16 (X button)\"\n    P16 = DAL.MICROBIT_ID_IO_P16,\n    //% block=\"P5 (A button)\"\n    P5 = DAL.MICROBIT_ID_IO_P5,\n    //% block=\"P11 (B button)\"\n    P11 = DAL.MICROBIT_ID_IO_P11,\n}\n\n/**\n * The event raised by the SparkFun gamer:bit pins\n */\n//%\nenum GamerBitEvent {\n    //% block=\"down\"\n    Down = DAL.MICROBIT_BUTTON_EVT_DOWN,\n    //% block=\"up\"\n    Up = DAL.MICROBIT_BUTTON_EVT_UP,\n    //% block=\"click\"\n    Click = DAL.MICROBIT_BUTTON_EVT_CLICK,\n}\n\n/**\n * Functions to operate the SparkFun gamer:bit\n */\n//% color=#f44242 icon=\"\\uf11b\"\nnamespace gamerbit {\n\t/**\n\t * \n\t */\n    //% shim=gamerbit::init\n    function init(): void {\n        return;\n    }\n\n\t/**\n\t * Determines if a button is pressed\n\t * @param button the pin that acts as a button\n\t */\n    //% weight=89\n    //% blockId=gamerbit_ispressed block=\"gamer:bit %button|is pressed\"\n    //% button.fieldEditor=\"gridpicker\" button.fieldOptions.columns=3\n    export function isPressed(button: GamerBitPin): boolean {\n        const pin = <DigitalPin><number>button;\n        pins.setPull(pin, PinPullMode.PullUp);\n        return pins.digitalReadPin(<DigitalPin><number>button) == 0;\n    }\n\n\t/**\n\t * Registers code to run when a gamer:bit event is detected.\n\t */\n    //% weight=90\n    //% blockId=gamerbit_onevent block=\"gamer:bit on %button|%event\"\n    //% button.fieldEditor=\"gridpicker\" button.fieldOptions.columns=3\n    //% event.fieldEditor=\"gridpicker\" event.fieldOptions.columns=3\n    export function onEvent(button: GamerBitPin, event: GamerBitEvent, handler: Action) {\n        init();\n        control.onEvent(<number>button, <number>event, handler); // register handler\n    }\n}\n","pxt.json":"{\n    \"name\": \"gamerbit\",\n    \"version\": \"0.0.9\",\n    \"description\": \"Sparkfun gamer:bit blocks\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"gamerbit.cpp\",\n        \"gamerbit.ts\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"_locales/fr/gamerbit-strings.json\",\n        \"_locales/fr/gamerbit-jsdoc-strings.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"branch\": \"v6.0.20\",\n        \"tag\": \"v6.0.20\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/7a51097a9c38b1543659890c2d5de326cbb7477a\",\n        \"target\": \"6.0.20\",\n        \"pxt\": \"9.0.13\"\n    }\n}\n","shims.d.ts":"// Will be auto-generated if needed.\n","test.ts":"// tests go here; this will not be compiled when this package is used as a library\ngamerbit.onEvent(GamerBitPin.P12, GamerBitEvent.Down, () => {\n    led.plot(0, 0)\n})\ngamerbit.onEvent(GamerBitPin.P12, GamerBitEvent.Up, () => {\n    led.unplot(0, 0)\n})\ngamerbit.onEvent(GamerBitPin.P16, GamerBitEvent.Down, () => {\n    led.plot(1, 0)\n})\ngamerbit.onEvent(GamerBitPin.P16, GamerBitEvent.Up, () => {\n    led.unplot(1, 0)\n})\ngamerbit.onEvent(GamerBitPin.P1, GamerBitEvent.Down, () => {\n    led.plot(1, 2)\n})\ngamerbit.onEvent(GamerBitPin.P1, GamerBitEvent.Up, () => {\n    led.unplot(1, 2)\n})\ngamerbit.onEvent(GamerBitPin.P2, GamerBitEvent.Down, () => {\n    led.plot(3, 2)\n})\ngamerbit.onEvent(GamerBitPin.P2, GamerBitEvent.Up, () => {\n    led.unplot(3, 2)\n})\ngamerbit.onEvent(GamerBitPin.P0, GamerBitEvent.Down, () => {\n    led.plot(2, 1)\n})\ngamerbit.onEvent(GamerBitPin.P0, GamerBitEvent.Up, () => {\n    led.unplot(2, 1)\n})\ngamerbit.onEvent(GamerBitPin.P8, GamerBitEvent.Down, () => {\n    led.plot(2, 3)\n})\ngamerbit.onEvent(GamerBitPin.P8, GamerBitEvent.Up, () => {\n    led.unplot(2, 3)\n})\n\nbasic.forever(() => {\n    if (gamerbit.isPressed(GamerBitPin.P12))\n        led.toggle(3, 0);\n    if (gamerbit.isPressed(GamerBitPin.P16))\n        led.toggle(4, 0);\n    if (gamerbit.isPressed(GamerBitPin.P0))\n        led.toggle(3, 1);\n    if (gamerbit.isPressed(GamerBitPin.P1))\n        led.toggle(4, 1);\n    if (gamerbit.isPressed(GamerBitPin.P2))\n        led.toggle(4, 2);\n    if (gamerbit.isPressed(GamerBitPin.P8))\n        led.toggle(4, 3);\n})\n\nled.unplot(4, 4)\n"}